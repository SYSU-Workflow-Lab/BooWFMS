<businessclass
        version="1.0"
        xmlns="http://www.w3.org/2005/07/scxml"
        name="Request"
        initial="Initial">

    <datamodel>
        <!--继承自父业务类的数据模型不需要在这里重新进行定义-->
        <data id="taskName" expr=""/>
        <data id="taskDescription" expr=""/>
        <data id="judgeCount" expr="3"/>
        <data id="decomposeCount" expr="3"/>
        <data id="decomposeVoteCount" expr="3"/>
        <data id="solveCount" expr="3"/>
        <data id="solveVoteCount" expr="3"/>
    </datamodel>

    <!-- 生命周期模型 -->

    <!-- 初始状态：publisher一登录系统就进入到初始状态 -->
    <state id="Initial">
        <onentry>
            <log label="Request_init" expr="'entry Initial state'"/>
        </onentry>
        <!-- publisher点击发布任务按钮产生publish事件，分配编辑众包详情任务 -->
        <transition event="submit" target="Waiting">
            <!--1.通过param孩子元素指定传给外部任务的参数，location对应于datamodel里面的data的location，从location中获得data的value；
                2.也可以通过namelist属性指定传给外部任务的参数，其中namelist的值对应于datamodel中的data的ID值，以空格隔开多个ID值；
                3.param和namelist不能同时指定
                -->
            <assign location="taskName" expr="_event.data.get('taskName')"/>
            <assign location="taskDescription" expr="_event.data.get('taskDescription')"/>
            <assign location="judgeCount" expr="_event.data.get('judgeCount')"/>
            <assign location="decomposeCount" expr="_event.data.get('decomposeCount')"/>
            <assign location="decomposeVoteCount" expr="_event.data.get('decomposeVoteCount')"/>
            <assign location="solveCount" expr="_event.data.get('solveCount')"/>
            <assign location="solveVoteCount" expr="_event.data.get('solveVoteCount')"/>

            <newbo src="Crowdsourcing.xml" instancesExpr="1">
                <param name="taskName" expr="taskName"/>
                <param name="taskDescription" expr="taskDescription"/>
                <param name="judgeCount" expr="judgeCount"/>
                <param name="decomposeCount" expr="decomposeCount"/>
                <param name="decomposeVoteCount" expr=" decomposeVoteCount"/>
                <param name="solveCount" expr="solveCount"/>
                <param name="solveVoteCount" expr="solveVoteCount"/>
            </newbo>
        </transition>
        <transition event="cancel" target="Final"/>
        <onexit>
            <log label="Request_init" expr="'exit Initial state'"/>
        </onexit>
    </state>

    <state id="Waiting">
        <onentry>
            <log label="Request_waiting" expr="'entry Waiting state'"/>
        </onentry>
        <transition event="Crowdsourcing.finish" target="Final"/>
        <onexit>
            <log label="Request_waiting" expr="'exit Waiting state'"/>
        </onexit>
    </state>

    <final id="Final">
        <onentry>
            <log label="Request_final" expr="'entry Final state'"/>
        </onentry>
        <onexit>
            <log label="Request_final" expr="'exit Final state'"/>
        </onexit>
    </final>
</businessclass>